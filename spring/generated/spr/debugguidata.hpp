//Warning, autogenerated file, do not edit
#pragma once
#include <vector>
#include <string>
#include <spr/data/entitystatemachine.hpp>
#include <spr/data/entitystate.hpp>
#include <spr/data/entitystateindex.hpp>
#include <spr/data/entityorientation.hpp>
#include <spr/data/position.hpp>
#include <spr/data/hitbox.hpp>
#include <spr/data/entitycollider.hpp>
#include <spr/data/texture.hpp>
#include <spr/data/textureindex.hpp>
#include <spr/data/spriteanimation.hpp>
#include <spr/data/spriteanimationindex.hpp>
#include <spr/data/fourdirectionalanimationgroup.hpp>
#include <spr/data/fourdirectionalanimationgroupindex.hpp>
#include <spr/data/entityspriteinstance.hpp>
#include <spr/data/sprite.hpp>
#include <spr/data/fourdirectionalsprite.hpp>
#include <spr/data/animatedsprite.hpp>
#include <spr/data/entitydirection.hpp>

namespace spr
{
    std::vector<std::string> debugHeaders(const TEntityStateMachine& table);
    void debugText(const struct EntityStateMachine& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntityState& table);
    void debugText(const struct EntityState& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntityStateIndex& table);
    void debugText(const struct EntityStateIndex& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntityOrientation& table);
    void debugText(const struct EntityOrientation& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TPosition& table);
    void debugText(const struct Position& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const THitbox& table);
    void debugText(const struct Hitbox& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntityCollider& table);
    void debugText(const struct EntityCollider& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TTexture& table);
    void debugText(const struct Texture& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TTextureIndex& table);
    void debugText(const struct TextureIndex& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TSpriteAnimation& table);
    void debugText(const struct SpriteAnimation& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TSpriteAnimationIndex& table);
    void debugText(const struct SpriteAnimationIndex& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TFourDirectionalAnimationGroup& table);
    void debugText(const struct FourDirectionalAnimationGroup& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TFourDirectionalAnimationGroupIndex& table);
    void debugText(const struct FourDirectionalAnimationGroupIndex& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntitySpriteInstance& table);
    void debugText(const struct EntitySpriteInstance& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TSprite& table);
    void debugText(const struct Sprite& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TFourDirectionalSprite& table);
    void debugText(const struct FourDirectionalSprite& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TAnimatedSprite& table);
    void debugText(const struct AnimatedSprite& data, std::vector<std::vector<std::string>>& outText);
    std::vector<std::string> debugHeaders(const TEntityDirection& table);
    void debugText(const struct EntityDirection& data, std::vector<std::vector<std::string>>& outText);
}
