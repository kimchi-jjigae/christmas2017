//Warning, autogenerated file, do not edit
#include "debugguidata.hpp"
#include <spr/tostring/tostringlist.hpp>

namespace spr
{
    std::vector<std::string> debugHeaders(const TEntityStateMachine& table)
    {
        return
        {
            "EntityId",
            "CurrentStateSet",
            "CurrentState",
            "StateContext",
        };
    }

    void debugText(const EntityStateMachine& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.entityId),
            spr::toStringList(data.currentStateSet),
            spr::toStringList(data.currentState),
            spr::toStringList(data.stateContext),
        };
    }
    std::vector<std::string> debugHeaders(const TEntityState& table)
    {
        return
        {
            "Duration",
            "Transitions",
            "Executors",
        };
    }

    void debugText(const EntityState& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.duration),
            spr::toStringList(data.transitions),
            spr::toStringList(data.executors),
        };
    }
    std::vector<std::string> debugHeaders(const TEntityStateIndex& table)
    {
        return
        {
            "StateSet",
            "StateHash",
            "StateId",
        };
    }

    void debugText(const EntityStateIndex& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.stateSet),
            spr::toStringList(data.stateHash),
            spr::toStringList(data.stateId),
        };
    }
    std::vector<std::string> debugHeaders(const TEntityOrientation& table)
    {
        return
        {
            "Orientation",
        };
    }

    void debugText(const EntityOrientation& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.orientation),
        };
    }
    std::vector<std::string> debugHeaders(const TPosition& table)
    {
        return
        {
            "Coordinate",
        };
    }

    void debugText(const Position& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.coordinate),
        };
    }
    std::vector<std::string> debugHeaders(const THitbox& table)
    {
        return
        {
            "Aabb",
        };
    }

    void debugText(const Hitbox& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.aabb),
        };
    }
    std::vector<std::string> debugHeaders(const TEntityCollider& table)
    {
        return
        {
            "CollisionType",
            "Executors",
        };
    }

    void debugText(const EntityCollider& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.collisionType),
            spr::toStringList(data.executors),
        };
    }
    std::vector<std::string> debugHeaders(const TTexture& table)
    {
        return
        {
            "Texture",
        };
    }

    void debugText(const Texture& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.texture),
        };
    }
    std::vector<std::string> debugHeaders(const TTextureIndex& table)
    {
        return
        {
            "Hash",
            "Id",
        };
    }

    void debugText(const TextureIndex& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.hash),
            spr::toStringList(data.id),
        };
    }
    std::vector<std::string> debugHeaders(const TSpriteAnimation& table)
    {
        return
        {
            "Start",
            "Size",
            "FrameAmount",
            "FrameTime",
        };
    }

    void debugText(const SpriteAnimation& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.start),
            spr::toStringList(data.size),
            spr::toStringList(data.frameAmount),
            spr::toStringList(data.frameTime),
        };
    }
    std::vector<std::string> debugHeaders(const TSpriteAnimationIndex& table)
    {
        return
        {
            "Hash",
            "Id",
        };
    }

    void debugText(const SpriteAnimationIndex& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.hash),
            spr::toStringList(data.id),
        };
    }
    std::vector<std::string> debugHeaders(const TFourDirectionalAnimationGroup& table)
    {
        return
        {
            "Up",
            "Down",
            "Left",
            "Right",
        };
    }

    void debugText(const FourDirectionalAnimationGroup& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.up),
            spr::toStringList(data.down),
            spr::toStringList(data.left),
            spr::toStringList(data.right),
        };
    }
    std::vector<std::string> debugHeaders(const TFourDirectionalAnimationGroupIndex& table)
    {
        return
        {
            "Hash",
            "Id",
        };
    }

    void debugText(const FourDirectionalAnimationGroupIndex& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.hash),
            spr::toStringList(data.id),
        };
    }
    std::vector<std::string> debugHeaders(const TEntitySpriteInstance& table)
    {
        return
        {
            "EntityId",
            "SpriteId",
            "Offset",
        };
    }

    void debugText(const EntitySpriteInstance& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.entityId),
            spr::toStringList(data.spriteId),
            spr::toStringList(data.offset),
        };
    }
    std::vector<std::string> debugHeaders(const TSprite& table)
    {
        return
        {
            "Position",
            "Size",
            "Texture",
        };
    }

    void debugText(const Sprite& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.position),
            spr::toStringList(data.size),
            spr::toStringList(data.texture),
        };
    }
    std::vector<std::string> debugHeaders(const TFourDirectionalSprite& table)
    {
        return
        {
            "CurrentOrientation",
            "AnimationGroup",
            "AnimationClock",
        };
    }

    void debugText(const FourDirectionalSprite& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.currentOrientation),
            spr::toStringList(data.animationGroup),
            spr::toStringList(data.animationClock),
        };
    }
    std::vector<std::string> debugHeaders(const TAnimatedSprite& table)
    {
        return
        {
            "Animation",
            "AnimationClock",
        };
    }

    void debugText(const AnimatedSprite& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.animation),
            spr::toStringList(data.animationClock),
        };
    }
    std::vector<std::string> debugHeaders(const TEntityDirection& table)
    {
        return
        {
            "Direction",
        };
    }

    void debugText(const EntityDirection& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.direction),
        };
    }
    std::vector<std::string> debugHeaders(const TRenderPassInstance& table)
    {
        return
        {
            "RenderPass",
            "Priority",
        };
    }

    void debugText(const RenderPassInstance& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.renderPass),
            spr::toStringList(data.priority),
        };
    }
    std::vector<std::string> debugHeaders(const TView& table)
    {
        return
        {
            "Viewport",
        };
    }

    void debugText(const View& data, std::vector<std::vector<std::string>>& outText)
    {
        outText =
        {
            spr::toStringList(data.viewport),
        };
    }
}
