#pragma once
//autogenerated file/ do not edit
#include <memory>
namespace dpx
{
template<typename DataType, bool externalId>
struct DataTable;
}

namespace spr
{
struct EntityStateMachine;
using TEntityStateMachine = dpx::DataTable<EntityStateMachine, false>;
struct EntityState;
using TEntityState = dpx::DataTable<EntityState, false>;
struct EntityStateIndex;
using TEntityStateIndex = dpx::DataTable<EntityStateIndex, false>;
struct EntityOrientation;
using TEntityOrientation = dpx::DataTable<EntityOrientation, true>;
struct Position;
using TPosition = dpx::DataTable<Position, false>;
struct Hitbox;
using THitbox = dpx::DataTable<Hitbox, true>;
struct EntityCollider;
using TEntityCollider = dpx::DataTable<EntityCollider, true>;
struct Texture;
using TTexture = dpx::DataTable<Texture, false>;
struct TextureIndex;
using TTextureIndex = dpx::DataTable<TextureIndex, false>;
struct SpriteAnimation;
using TSpriteAnimation = dpx::DataTable<SpriteAnimation, false>;
struct SpriteAnimationIndex;
using TSpriteAnimationIndex = dpx::DataTable<SpriteAnimationIndex, false>;
struct FourDirectionalAnimationGroup;
using TFourDirectionalAnimationGroup = dpx::DataTable<FourDirectionalAnimationGroup, false>;
struct FourDirectionalAnimationGroupIndex;
using TFourDirectionalAnimationGroupIndex = dpx::DataTable<FourDirectionalAnimationGroupIndex, false>;
struct EntitySpriteInstance;
using TEntitySpriteInstance = dpx::DataTable<EntitySpriteInstance, false>;
struct Sprite;
using TSprite = dpx::DataTable<Sprite, false>;
struct FourDirectionalSprite;
using TFourDirectionalSprite = dpx::DataTable<FourDirectionalSprite, true>;
struct AnimatedSprite;
using TAnimatedSprite = dpx::DataTable<AnimatedSprite, true>;
struct EntityDirection;
using TEntityDirection = dpx::DataTable<EntityDirection, true>;
struct RenderPassInstance;
using TRenderPassInstance = dpx::DataTable<RenderPassInstance, false>;
struct View;
using TView = dpx::DataTable<View, false>;

struct Tables
{
    std::unique_ptr<TEntityStateMachine> tEntityStateMachine;
    std::unique_ptr<TEntityState> tEntityState;
    std::unique_ptr<TEntityStateIndex> tEntityStateIndex;
    std::unique_ptr<TEntityOrientation> tEntityOrientation;
    std::unique_ptr<TPosition> tPosition;
    std::unique_ptr<THitbox> tHitbox;
    std::unique_ptr<TEntityCollider> tEntityCollider;
    std::unique_ptr<TTexture> tTexture;
    std::unique_ptr<TTextureIndex> tTextureIndex;
    std::unique_ptr<TSpriteAnimation> tSpriteAnimation;
    std::unique_ptr<TSpriteAnimationIndex> tSpriteAnimationIndex;
    std::unique_ptr<TFourDirectionalAnimationGroup> tFourDirectionalAnimationGroup;
    std::unique_ptr<TFourDirectionalAnimationGroupIndex> tFourDirectionalAnimationGroupIndex;
    std::unique_ptr<TEntitySpriteInstance> tEntitySpriteInstance;
    std::unique_ptr<TSprite> tSprite;
    std::unique_ptr<TFourDirectionalSprite> tFourDirectionalSprite;
    std::unique_ptr<TAnimatedSprite> tAnimatedSprite;
    std::unique_ptr<TEntityDirection> tEntityDirection;
    std::unique_ptr<TRenderPassInstance> tRenderPassInstance;
    std::unique_ptr<TView> tView;
};

void instantiateTables(Tables& tables);
}
