@file-tablecapacity.hpp@
#include <cstddef>
#include <iostream>
#include <spr/data/tables.hpp>

namespace spr
{
struct SprTablesCapacity
{
@foreach-table@
    size_t $table-name$Capacity;
@end@
};

bool operator==(const SprTablesCapacity& a, const SprTablesCapacity& b);
bool operator!=(const SprTablesCapacity& a, const SprTablesCapacity& b);

SprTablesCapacity sprTablesCapacity(const spr::Tables& tables);
void sprEnsureCapacity(size_t capacity, spr::Tables& tables);

}
@end@

@file-tablecapacity.cpp@
#include "tablecapacity.hpp"
@foreach-table@
#include <spr/data/$table-name$.hpp>
@end@
namespace spr
{
bool operator==(const SprTablesCapacity& a, const SprTablesCapacity& b)
{
    return
@foreach-table@
    a.$table-name$Capacity == b.$table-name$Capacity &&
@end@
    true;
}

bool operator!=(const SprTablesCapacity& a, const SprTablesCapacity& b)
{
    return !(a == b);
}

SprTablesCapacity sprTablesCapacity(const spr::Tables& tables)
{
    SprTablesCapacity capacity;
@foreach-table@
    capacity.$table-name$Capacity = tables.t$table-Name$->ids.capacity();
@end@
    return capacity;
}

void sprEnsureCapacity(size_t capacity, spr::Tables& tables)
{
@foreach-table@
    if(count(*tables.t$table-Name$) + capacity > tables.t$table-Name$->ids.capacity())
    {
        tables.t$table-Name$->ids.reserve(count(*tables.t$table-Name$) + capacity);
        tables.t$table-Name$->data.reserve(count(*tables.t$table-Name$) + capacity);
    }
@end@
}
}
@end@
