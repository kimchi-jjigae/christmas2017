@file-tablecapacity.hpp@
#pragma once
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

#include <cstddef>
#include <iostream>
#include <spr/tablecapacity.hpp>
#include <data/datatables.hpp>

@foreach-table@
#include <data/$table-name$.hpp>
@end@

struct DataTablesCapacity
{
@foreach-table@
    size_t $table-name$Capacity;
@end@
};

bool operator==(const DataTablesCapacity& a, const DataTablesCapacity& b);
bool operator!=(const DataTablesCapacity& a, const DataTablesCapacity& b);

DataTablesCapacity tablesCapacity(const GameTables& tables);
void ensureCapacity(size_t capacity, GameTables& tables);
@end@

@file-tablecapacity.cpp@
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

#include "tablecapacity.hpp"

bool operator==(const DataTablesCapacity& a, const DataTablesCapacity& b)
{
    return
@foreach-table@
    a.$table-name$Capacity == b.$table-name$Capacity &&
@end@
    true;
}

bool operator!=(const DataTablesCapacity& a, const DataTablesCapacity& b)
{
    return !(a == b);
}

DataTablesCapacity tablesCapacity(const GameTables& tables)
{
    DataTablesCapacity capacity;
@foreach-table@
    capacity.$table-name$Capacity = tables.t$table-Name$->ids.capacity();
@end@
    return capacity;
}

void ensureCapacity(size_t capacity, GameTables& tables)
{
@foreach-table@
    if(tables.t$table-Name$->ids.size() + capacity > tables.t$table-Name$->ids.capacity())
    {
        tables.t$table-Name$->ids.reserve(tables.t$table-Name$->ids.size() + capacity);
        tables.t$table-Name$->data.reserve(tables.t$table-Name$->data.size() + capacity);
    }
@end@
}
@end@
