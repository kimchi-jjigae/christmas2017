@file-tablecapacity.hpp@
#include <cstddef>
#include <iostream>

struct TablesCapacity
{
@foreach-table@
    size_t $table-name$Capacity;
@end@
};

bool operator==(const TablesCapacity& a, const TablesCapacity& b);
bool operator!=(const TablesCapacity& a, const TablesCapacity& b);

template <typename TableHolder>
TablesCapacity tablesCapacity(const TableHolder& tables)
{
    TablesCapacity capacity;
@foreach-table@
    capacity.$table-name$Capacity = tables.t$table-Name$.ids.capacity();
@end@
    return capacity;
}

template <typename TableHolder>
void ensureCapacity(size_t capacity, TableHolder& tables)
{
@foreach-table@
    if(tables.t$table-Name$.ids.size() + capacity > tables.t$table-Name$.ids.capacity())
    {
        tables.t$table-Name$.ids.reserve(tables.t$table-Name$.ids.size() + capacity);
        tables.t$table-Name$.data.reserve(tables.t$table-Name$.data.size() + capacity);
    }
@end@
}
@end@

@file-tablecapacity.cpp@
#include "tablecapacity.hpp"
bool operator==(const TablesCapacity& a, const TablesCapacity& b)
{
    return
@foreach-table@
    a.$table-name$Capacity == b.$table-name$Capacity &&
@end@
    true;
}

bool operator!=(const TablesCapacity& a, const TablesCapacity& b)
{
    return !(a == b);
}
@end@
