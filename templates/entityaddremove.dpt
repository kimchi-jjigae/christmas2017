@file-entityaddremove.hpp@
#pragma once
#include <dpx/tableid.hpp>
#include <spr/entity/entityproperties.hpp>
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

void addEntityGenerated(dpx::TableId entityId, spr::EntityProperties properties, struct GameTables& tables);
void removeEntityDataGenerated(dpx::TableId entityId, struct GameTables& tables);

@end@

@file-entityaddremove.cpp@
#include "entityaddremove.hpp"
#include <data/datatables.hpp>
@foreach-table@
@if-has_tag=entity@
#include <data/$table-name$.hpp>
@end@
@end@
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

void addEntityGenerated(dpx::TableId entityId, spr::EntityProperties properties, GameTables& tables)
{
@foreach-table@
@if-has_tag=entity@
@if-has_tag=auto_add@
@ifnot-is_parent@
@ifnot-is_child@
    insertOptional(entityId, "$table-_name$"_hash, properties, *tables.t$table-Name$);
@end@
@end@
@if-is_parent@
    auto $table-lName$ = properties.find("$table-_name$"_hash);
    if($table-lName$ != properties.end())
    {
        spr::$table-Name$ data = std::move($table-lName$->second.get<spr::$table-Name$>());

        if(data.$table-lName$Type == spr::$table-Name$::_Base)
        {
            insert(entityId, std::move(data), *tables.t$table-Name$);
        }
@foreach-child@
        else if(data.$table-lName$Type == spr::$table-Name$::$child-Name$)
        {
            spr::insert$table-Name$(entityId, std::move(data),
                    std::move(properties.at("$child-_name$"_hash).get<spr::$child-Name$>()),
                    tables);
        }
@end@
    }
@end@
@end@
@end@
@end@

}

void removeEntityDataGenerated(dpx::TableId entityId, GameTables& tables)
{
@foreach-table@
@if-has_tag=entity@
@if-has_tag=auto_del@
@ifnot-is_parent@
@ifnot-is_child@
    erase(entityId, *tables.t$table-Name$);
@end@
@end@
@end@
@if-is_parent@
    spr::erase$table-Name$(entityId, tables);
@end@
@end@
@end@
}
@end@
