@foreach-table@
@if-is_parent@
@file-data/$table-name$addutil.hpp@
#pragma once
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

#include <data/datatables.hpp>
#include <dpx/tableid.hpp>

bool erase$table-Name$(int32_t id, GameTables& tables);
@foreach-child@
int32_t insert$table-Name$(@if-has_external_id@ dpx::TableId id, @end@struct $table-Name$ $table-name$, struct $child-Name$ $child-name$, GameTables& tables);
@end@
@end@

@file-data/$table-name$addutil.cpp@
//!!!=== NOTE: autogenerated file, any changes might get overwritten at any point ===!!!

#include "$table-name$addutil.hpp"
#include <data/$table-name$.hpp>
@foreach-child@
#include <data/$child-name$.hpp>
@end@
#include <dpx/insert.hpp>
#include <dpx/erase.hpp>

@foreach-child@
int32_t insert$table-Name$(@if-has_external_id@ dpx::TableId id, @end@struct $table-Name$ $table-name$, struct $child-Name$ $child-name$, GameTables& tables)
{
    $table-name$.$table-lName$Type = $table-Name$::$child-Name$;
    int32_t newId = insert(@if-has_external_id@ id, @end@std::move($table-name$), *tables.t$table-Name$).id;

    insert(newId, std::move($child-name$), *tables.t$child-Name$);

    return newId;
}
@end@

bool erase$table-Name$(int32_t id, GameTables& tables)
{
    bool erased = erase(id, *tables.t$table-Name$);
@foreach-child@
    erase(id, *tables.t$child-Name$);
    return erased;
@end@
}
@end@
@end@
@end@
